import { $, component$, useOnWindow, useSignal } from "@builder.io/qwik";
import { routeLoader$, type DocumentHead } from "@builder.io/qwik-city";
import InfiniteList from '~/components/infinite-list/inifinite-list';
import type { InitialValues } from '@modular-forms/qwik';
import { formAction$, valiForm$ } from '@modular-forms/qwik';
import { email, type Input, minLength, object, string } from 'valibot';
import { api } from "~/lib/adapter";
 

export const usePageLoad = routeLoader$(async () => {
  const {data} = await api.exampleApi()
  return data
});

function useInLoad() {
  const onload = useSignal(false);
  useOnWindow(
    'load',
    $(() => {
      onload.value = true;
    })
  );
  return onload.value;
}

const LoginSchema = object({
  email: string([
    minLength(1, 'Please enter your email.'),
    email('The email address is badly formatted.'),
  ]),
  password: string([
    minLength(1, 'Please enter your password.'),
    minLength(8, 'Your password must have 8 characters or more.'),
  ]),
});
 
type LoginForm = Input<typeof LoginSchema>;
 
export const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({
  email: 'test@example.com',
  password: '',
}));
 
export const useFormAction = formAction$<LoginForm>(async (values) => {
  await api.exampleLoginApi(values)
}, valiForm$(LoginSchema));

export default component$(() => {
  const onload = useInLoad()
  const PER_PAGE = 100
  const loadMore = useSignal(true);
	const itemsSig = useSignal([...new Array(PER_PAGE).keys()]);
  const pageData = usePageLoad(); 

  return (
    <main 
      style={{height: '100vh'}}
    >
      <div style={{display: 'flex', background: 'grey', width: '100vw', height: '100vh', contain: 'strict'}}>
        <div style={{margin: 'auto', width: 'fit-content'}}>
          <a href="/login" style={{display: 'block'}}>Login</a>
          <a href="/signup" style={{display: 'block'}}>Signup</a>
        </div>
      </div>
      {onload && 
        <InfiniteList
          loadMore={loadMore.value}
          onLoadMore$={$(async () => {
            itemsSig.value = [...itemsSig.value, ...new Array(PER_PAGE).keys()];
            loadMore.value = itemsSig.value.length < 1000;
          })}
        >
          {itemsSig.value.map((_, key) => (
            <div 
              key={key} 
              style={{
                contentVisibility: 'auto',
                containIntrinsicSize: '0 30px',
              }}
            >
              {pageData.value.message}{key}
            </div>
          ))}
          <div q:slot='loading' >
            Loading...
          </div>
        </InfiniteList>
      }
    </main>
  );
});


export const head: DocumentHead = {
  title: "Create Qwik App",
  meta: [
    {
      name: "description",
      content: "Generated by create next app",
    },
  ],
};
