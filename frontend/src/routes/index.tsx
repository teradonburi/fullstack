import { $, component$, useOnWindow, useSignal, useVisibleTask$ } from "@builder.io/qwik";
import { routeLoader$, type DocumentHead } from "@builder.io/qwik-city";
import InfiniteList from '~/components/infinite-list/inifinite-list';
import { api } from "~/lib/adapter";
import type { Resolve } from "~/type";
 

export const usePageLoad = routeLoader$(async () => {
  const {data} = await api.exampleApi()
  return data
});

function useInLoad() {
  const onload = useSignal(false);
  useOnWindow(
    'load',
    $(() => {
      onload.value = true;
    })
  );
  return onload.value;
}

type User = Resolve<ReturnType<typeof api.loadUser>>['data'];

export default component$(() => {
  const onload = useInLoad()
  const PER_PAGE = 100
  const loadMore = useSignal(true);
	const itemsSig = useSignal([...new Array(PER_PAGE).keys()]);
  const pageData = usePageLoad(); 
  const user = useSignal<User>();

  // eslint-disable-next-line qwik/no-use-visible-task
  useVisibleTask$(async () => {
    const userString = window.localStorage.getItem('user');
    const userObj = userString ? JSON.parse(userString) : null;
    if (!userObj) return;
    const {data} = await api.loadUser({headers: {Authorization: `Bearer ${userObj?.token}`}})
    user.value = data;
  })


  const logout = $(() => {
    window.localStorage.removeItem('user');
    return false;
  })

  return (
    <main 
      style={{height: '100vh'}}
    >
      <div style={{display: 'flex', background: 'grey', width: '100vw', height: '100vh', contain: 'strict'}}>
        {user.value ?               
          <div style={{margin: 'auto', width: 'fit-content'}}>
            {user.value.name}
            <a onClick$={logout} href='' style={{display: 'block'}}>Logout</a>
          </div>
        :
          <div style={{margin: 'auto', width: 'fit-content'}}>
            <a href="/login" style={{display: 'block'}}>Login</a>
            <a href="/signup" style={{display: 'block'}}>Signup</a>
          </div> 
        }
      </div>
      {onload && 
        <InfiniteList
          loadMore={loadMore.value}
          onLoadMore$={$(async () => {
            itemsSig.value = [...itemsSig.value, ...new Array(PER_PAGE).keys()];
            loadMore.value = itemsSig.value.length < 1000;
          })}
        >
          {itemsSig.value.map((_, key) => (
            <div 
              key={key} 
              style={{
                contentVisibility: 'auto',
                containIntrinsicSize: '0 30px',
              }}
            >
              {pageData.value.message}{key}
            </div>
          ))}
          <div q:slot='loading' >
            Loading...
          </div>
        </InfiniteList>
      }
    </main>
  );
});


export const head: DocumentHead = {
  title: "Create Qwik App",
  meta: [
    {
      name: "description",
      content: "Generated by create next app",
    },
  ],
};
